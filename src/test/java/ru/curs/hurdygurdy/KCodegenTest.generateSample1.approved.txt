---

---
/com
---
/com/example
---
/com/example/controller
---
/com/example/controller/Controller.kt
package com.example.controller

import com.example.dto.DatabaseConnectionRequest
import com.example.dto.MenuDTO
import com.example.dto.NullableType
import javax.servlet.http.HttpServletResponse
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import org.springframework.web.bind.`annotation`.DeleteMapping
import org.springframework.web.bind.`annotation`.GetMapping
import org.springframework.web.bind.`annotation`.PathVariable
import org.springframework.web.bind.`annotation`.PutMapping
import org.springframework.web.bind.`annotation`.RequestBody
import org.springframework.web.bind.`annotation`.RequestParam

public interface Controller {
  @GetMapping(
    value = ["/menu"],
    produces = ["application/json"],
  )
  public fun getMenu(response: HttpServletResponse): MenuDTO?

  @DeleteMapping(value = ["/menu"])
  public fun deleteMenu(response: HttpServletResponse): Unit

  @GetMapping(
    value = ["/api/v1/affiliate/{id}/playeractivities/csv"],
    produces = ["text/csv"],
  )
  public fun affiliatePlayerActivitiesCSV(
    @PathVariable(name = "id") id: Int?,
    @RequestParam(required = false, name = "status") status: Boolean?,
    response: HttpServletResponse,
  ): String?

  @GetMapping(
    value = ["/api/v1/bills"],
    produces = ["application/json"],
  )
  public fun getBills(@RequestParam(required = false, name = "affiliate_id", defaultValue = "42")
      affiliateId: Int?, response: HttpServletResponse): Int?

  @PutMapping(
    value = ["/api/v1/external"],
    produces = ["text/csv"],
  )
  public fun `external`(@RequestBody request: DatabaseConnectionRequest,
      response: HttpServletResponse): Int?

  @PutMapping(
    value = ["/api/v1/external2"],
    produces = ["text/csv"],
  )
  public fun external2(@RequestBody request: NullableType?, response: HttpServletResponse): String?
}
---
/com/example/dto
---
/com/example/dto/MenuDTO.kt
package com.example.dto

import com.fasterxml.jackson.databind.PropertyNamingStrategies
import com.fasterxml.jackson.databind.`annotation`.JsonNaming
import kotlin.collections.List

@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy::class)
public data class MenuDTO(
  public val menuItems: List<MenuItemDTO>,
)
---
/com/example/dto/MenuItemDTO.kt
package com.example.dto

import com.fasterxml.jackson.databind.PropertyNamingStrategies
import com.fasterxml.jackson.databind.`annotation`.JsonDeserialize
import com.fasterxml.jackson.databind.`annotation`.JsonNaming
import com.fasterxml.jackson.databind.`annotation`.JsonSerialize
import java.lang.Serializable
import java.time.ZonedDateTime
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.collections.List

@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy::class)
public data class MenuItemDTO(
  public val id: String,
  public val enabled: Boolean? = null,
  public val name: String = "Default name",
  public val menuItems: List<MenuItemDTO> = listOf(),
  public val menuTips: List<String?>,
  public val boolValue: Boolean? = false,
  public val intValue: Int? = 42,
  public val strValue: String? = null,
  public val floatValue: Double? = 3.14,
  @field:JsonDeserialize(using = ZonedDateTimeDeserializer::class)
  @get:JsonSerialize(using = ZonedDateTimeSerializer::class)
  public val dateVale: ZonedDateTime? = null,
) : Serializable
---
/com/example/dto/ZonedDateTimeDeserializer.kt
package com.example.dto

import com.fasterxml.jackson.core.JsonParseException
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonDeserializer
import java.time.DateTimeException
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

public class ZonedDateTimeDeserializer : JsonDeserializer<ZonedDateTime>() {
  private val formatter: DateTimeFormatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME

  public override fun deserialize(jsonParser: JsonParser,
      deserializationContext: DeserializationContext): ZonedDateTime {
    val date = jsonParser.text
    try  {
      return ZonedDateTime.parse(date, formatter)
    }
    catch (e: DateTimeException) {
      throw JsonParseException(jsonParser, e.message)
    }
  }
}
---
/com/example/dto/ZonedDateTimeSerializer.kt
package com.example.dto

import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.databind.JsonSerializer
import com.fasterxml.jackson.databind.SerializerProvider
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import kotlin.Unit

public class ZonedDateTimeSerializer : JsonSerializer<ZonedDateTime>() {
  private val formatter: DateTimeFormatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME

  public override fun serialize(
    `value`: ZonedDateTime,
    gen: JsonGenerator,
    serializers: SerializerProvider,
  ): Unit {
    gen.writeString(formatter.format(value))
  }
}
