---

---
/com
---
/com/example
---
/com/example/controller
---
/com/example/controller/Api.java
package com.example.controller;

import com.example.dto.MenuDTO;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

interface Api {
  @GetMapping(
      value = "/menu",
      produces = "application/json"
  )
  MenuDTO getMenu();

  @DeleteMapping("/menu")
  void deleteMenu();

  @GetMapping(
      value = "/api/v1/affiliate/{id}/playeractivities/csv",
      produces = "text/csv"
  )
  String affiliatePlayerActivitiesCSV(@PathVariable(name = "id") int id,
      @RequestParam(required = false, name = "status") Boolean status);

  @GetMapping(
      value = "/api/v1/bills",
      produces = "application/json"
  )
  int getBills(
      @RequestParam(required = false, name = "affiliate_id", defaultValue = "42") Integer affiliateId);
}
---
/com/example/controller/Controller.java
package com.example.controller;

import com.example.dto.MenuDTO;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

interface Controller {
  @GetMapping(
      value = "/menu",
      produces = "application/json"
  )
  MenuDTO getMenu();

  @DeleteMapping("/menu")
  void deleteMenu();

  @GetMapping(
      value = "/api/v1/affiliate/{id}/playeractivities/csv",
      produces = "text/csv"
  )
  String affiliatePlayerActivitiesCSV(@PathVariable(name = "id") int id,
      @RequestParam(required = false, name = "status") Boolean status);

  @GetMapping(
      value = "/api/v1/bills",
      produces = "application/json"
  )
  int getBills(
      @RequestParam(required = false, name = "affiliate_id", defaultValue = "42") Integer affiliateId);
}
---
/com/example/dto
---
/com/example/dto/MenuDTO.java
package com.example.dto;

import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonNaming;
import java.util.List;
import lombok.Data;

@Data
@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
public class MenuDTO {
  private List<MenuItemDTO> menuItems;
}
---
/com/example/dto/MenuItemDTO.java
package com.example.dto;

import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonNaming;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Serializable;
import java.lang.String;
import java.time.ZonedDateTime;
import java.util.List;
import lombok.Data;

@Data
@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
public class MenuItemDTO implements Serializable {
  private String id;

  private boolean enabled;

  private String name;

  private List<MenuItemDTO> menuItems;

  private boolean boolValue;

  private Integer intValue;

  private String strValue;

  private Double floatValue;

  @JsonDeserialize(
      using = ZonedDateTimeDeserializer.class
  )
  private ZonedDateTime dateVale;
}
---
/com/example/dto/ZonedDateTimeDeserializer.java
package com.example.dto;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import java.io.IOException;
import java.lang.Override;
import java.time.DateTimeException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class ZonedDateTimeDeserializer extends JsonDeserializer<ZonedDateTime> {
  private final DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;

  @Override
  public ZonedDateTime deserialize(JsonParser jsonParser,
      DeserializationContext deserializationContext) throws IOException {
    String date = jsonParser.getText();
    try  {
      return ZonedDateTime.parse(date, formatter);
    }
    catch (DateTimeException e) {
      throw new JsonParseException(jsonParser, e.getMessage());
    }
  }
}
